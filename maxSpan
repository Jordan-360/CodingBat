Array-3 : maxSpan

Consider the leftmost and righmost appearances of some value in an array. 
We'll say that the "span" is the number of elements between the two inclusive. A single value has a span of 1. Returns the largest span found in the given array. (Efficiency is not a priority.)


maxSpan([1, 2, 1, 1, 3]) → 4
maxSpan([1, 4, 2, 1, 4, 1, 4]) → 6
maxSpan([1, 4, 2, 1, 4, 4, 4]) → 6

public int maxSpan(int[] nums) {
   if(nums.length < 1) {
            return 0;
        }
        int sum1 = 0;
        int sum2 = 0;
        int targetNumber1 = nums[0];
        int targetNumber2 = nums[nums.length - 1];
        int firstIndexOfNumber1 = 0;
        int firstIndexOfNumber2 = 0;
        int lastIndexOfNumber1 = 0;
        int lastIndexOfNumber2 = 0;

        for(int i = 0; i < nums.length; i++) {
            if (nums[i] == targetNumber1) {
                firstIndexOfNumber1 = i;
                break;
            }
        }
        for(int i = 0; i < nums.length; i++) {
            if (nums[i] == targetNumber2) {
                firstIndexOfNumber2 = i;
                break;
            }
        }
        for(int i = 0; i < nums.length; i++) {
            if (nums[i] == targetNumber1) {
                lastIndexOfNumber1 = i;

            }
        }
        for(int i = 0; i < nums.length; i++) {
            if (nums[i] == targetNumber2) {
                lastIndexOfNumber2 = i;
            }
        }

        for(int i = firstIndexOfNumber1; i <= lastIndexOfNumber1; i++) {
            sum1++;
        }
        for(int i = firstIndexOfNumber2; i <= lastIndexOfNumber2; i++) {
            sum2++;
        }

        if(sum1 == sum2) {
            return sum1;
        } else {
            return Math.max(sum1, sum2);
        }

    }

